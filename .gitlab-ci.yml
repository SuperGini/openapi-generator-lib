image: openjdk:21-slim-bookworm

#before_script:
##  - apk add --no-cache yq  # For Alpine-based images
#  # or
#  - apt-get update && apt-get install -y yq # For Debian/Ubuntu-based images


before_script:
  # 1. Update apt package lists
  - apt-get update -y
  # 2. Install 'wget' which is needed to download the yq binary
  - apt-get install -y wget
  # 3. DOWNLOAD AND INSTALL THE CORRECT (GO) YQ VERSION
  #    This step is crucial to avoid the Python yq that causes your error.
  #    We are downloading it directly from Mike Farah's GitHub releases.
  - wget https://github.com/mikefarah/yq/releases/download/v4.40.5/yq_linux_amd64 -O /usr/local/bin/yq
  # 4. Make the downloaded yq binary executable
  - chmod +x /usr/local/bin/yq
  # 5. (Optional but recommended) Verify yq installation and version
  - echo "Verifying yq version:"
  - yq --version # This should show something like "yq (https://github.com/mikefarah/yq/) version 4.40.5"

stages:
  - compile
  - publish
  - publish-typescript
  - generate-typescript

workflow:
  rules:
    # Allow manual pipeline runs via the GitLab UI.
    # This is where you provide your "keyboard input" via the form.
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: always

#compile-validation-stage:
#  stage: compile
#  variables:
#    openApiFileName:
#      value: "default-value"
#  script:
#    - chmod +x ./gradlew
#    - ./gradlew compileJava -PopenApiFileName="$openApiFileName"
#
#publish-java-library-stage:
#  stage: publish
#  variables:
#    ci_JOB_TOKEN_OPEN_API:
#      value: default-value
#    openApiFileName:
#      value: "default-value"
#    OPENAPI_BASE_DIR:
#      value: "openapi/"
#  script:
#    - chmod +x ./gradlew
#    - FULL_OPENAPI_FILE_PATH="${OPENAPI_BASE_DIR}${openApiFileName}.yaml"
#    - version=$(yq e '.info.version' "$FULL_OPENAPI_FILE_PATH")                  # Extract version from OpenAPI YAML file
#    - sed -i "s/version = \".*\"/version = \"$version\"/" build.gradle.kts       # Replace version in build.gradle.kts
#    - ./gradlew publish -Pci_JOB_TOKEN_OPEN_API="$ci_JOB_TOKEN_OPEN_API" -PopenApiFileName="$openApiFileName"


generate-typescript-library:
  stage: generate-typescript
  image: openjdk:21-slim-bookworm
  variables:
    openApiFileName:
      value: "default-value"
    ci_JOB_TOKEN_OPEN_API:
      value: default-value
#  script:
#    # --- Add these lines to install Java ---
#    - apt-get update -y # Update package lists
#    - apt-get install -y openjdk-21-jre-headless # Install a headless Java 21 JRE
#    - npm install @openapitools/openapi-generator-cli -g
#    - openapi-generator-cli generate -g typescript-angular -i ./openapi/${openApiFileName}.yaml -c config-options-typescript.yaml -o generated2
#    - echo "//${CI_SERVER_HOST}/api/v4/projects/${CI_PROJECT_ID}/packages/npm/:_authToken=${ci_JOB_TOKEN_OPEN_API}">.npmrc
#    - cd generated2
#    - npm publish
#  script:
#    # Install Node.js and npm into the openjdk:21-slim-bookworm image
#    # These commands are common for Debian-based systems4
#    - apt-get update -y
#    - apt-get install -y curl
#    - curl -fsSL https://deb.nodesource.com/setup_22.x | bash - # Using Node.js 20 LTS
#    - apt-get install -y nodejs
#    # Now that Node.js and npm are installed, proceed with your original script
#    - sed -i "s/\"name\": \"@openapi-generator\/test-library\"/\"name\": \"@openapi-generator\/${openApiFileName}\"/g" package.json
#    - sed -i "s/\"version\": \".*\"/\"version\": \"${VERSION}\"/g" package.json
#
#
#    - npm install @openapitools/openapi-generator-cli -g
#    - openapi-generator-cli generate -g typescript-angular -i ./openapi/${openApiFileName}.yaml -c config-options-typescript.yaml -o generated2
#    - echo "@openapi-generator:registry=https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/packages/npm/" > .npmrc
#    - echo "//${CI_SERVER_HOST}/api/v4/projects/${CI_PROJECT_ID}/packages/npm/:_authToken=${CI_JOB_TOKEN}" >> .npmrc
#    - echo "--- Contents of .npmrc ---"
#    - cat .npmrc
#    - echo "--------------------------"
#    - npm publish

  script:
    # Use | to indicate a literal block scalar for the script commands
    |
    # Install Node.js and npm into the openjdk:21-slim-bookworm image
    # These commands are common for Debian-based systems
    apt-get update -y
    apt-get install -y curl
    curl -fsSL https://deb.nodesource.com/setup_22.x | bash - # Using Node.js 20 LTS
    apt-get install -y nodejs
    # Now that Node.js and npm are installed, proceed with your original script

    # Extract version from OpenAPI YAML file
    VERSION=$(yq e '.info.version' ./openapi/${openApiFileName}.yaml)

    # Replace 'test-library' in the name field with openApiFileName
    sed -i "s/\"name\": \"@openapi-generator\/test-library\"/\"name\": \"@openapi-generator\/${openApiFileName}\"/g" package.json
    # Replace version in package.json
    sed -i "s/\"version\": \".*\"/\"version\": \"${VERSION}\"/g" package.json

    npm install @openapitools/openapi-generator-cli -g
    openapi-generator-cli generate -g typescript-angular -i ./openapi/${openApiFileName}.yaml -c config-options-typescript.yaml -o generated2
    echo "@openapi-generator:registry=https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/packages/npm/" > .npmrc
    echo "//${CI_SERVER_HOST}/api/v4/projects/${CI_PROJECT_ID}/packages/npm/:_authToken=${CI_JOB_TOKEN}" >> .npmrc
    echo "--- Contents of .npmrc ---"
    cat .npmrc
    echo "--------------------------"
    npm publish




#https://www.youtube.com/watch?v=Yn0N8_Gfcyw ->HOW TO PUBLISH NPM PACKAGES
#publish-typescript-library:
#  stage: publish-typescript
#  image: node:latest
#  script:
#    - echo "//${CI_SERVER_HOST}/api/v4/projects/${CI_PROJECT_ID}/packages/npm/:_authToken=${ci_JOB_TOKEN_OPEN_API}">.npmrc
#    - cd generated2
#    - npm publish


