image: openjdk:21-slim-bookworm

#https://www.youtube.com/watch?v=Yn0N8_Gfcyw ->HOW TO PUBLISH NPM PACKAGES
#before_script:
##  - apk add --no-cache yq  # For Alpine-based images
#  # or
#  - apt-get update && apt-get install -y yq # For Debian/Ubuntu-based images

variables:
  gitlab_deploy_token: "default"
  openApiFileName: "default"

before_script:
  # 1. Update apt package lists
  - apt-get update -y
  # 2. Install 'wget' which is needed to download the yq binary
  - apt-get install -y wget
  # 3. DOWNLOAD AND INSTALL THE CORRECT (GO) YQ VERSION
  #    We are downloading it directly from Mike Farah's GitHub releases.
  - wget https://github.com/mikefarah/yq/releases/download/v4.40.5/yq_linux_amd64 -O /usr/local/bin/yq
  # 4. Make the downloaded yq binary executable
  - chmod +x /usr/local/bin/yq
  # 5. (Optional but recommended) Verify yq installation and version
  - echo "Verifying yq version:"
  - yq --version # This should show something like "yq (https://github.com/mikefarah/yq/) version 4.40.5"

stages:
  - generate-job
  - publish-job

workflow:
  rules:
    # Allow manual pipeline runs via the GitLab UI.
    # This is where you provide your "keyboard input" via the form.
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: always

generate-java-typescript-files-stage:
  stage: generate-job
  script:
    - chmod +x ./gradlew
    - ./gradlew javaSpring typescriptAngular -PopenApiFileName="$openApiFileName"
  artifacts:
    paths:
      - javagenerated/             #location where java files were generated
      - "${openApiFileName}/"      #location where typescript files were generated
    expire_in: 1 hour
  rules:
    - if: '$openApiFileName =~ /openapi/'
#
publish-java-library-stage:
  stage: publish-job
  script:
    - chmod +x ./gradlew
    - FULL_OPENAPI_FILE_PATH="./specs/${openApiFileName}.yaml"
    - libraryVersion=$(yq e '.info.version' "$FULL_OPENAPI_FILE_PATH")                  # Extract version from OpenAPI YAML file
    - ./gradlew publish -Pgitlab_deploy_token="${gitlab_deploy_token}" -PopenApiFileName="${openApiFileName}" -Pversion="${libraryVersion}"
  rules:
    - if: '$openApiFileName =~ /openapi/'

publish-typescript-library-stage:
  stage: publish-job
  image: node:latest
  script:
    - |
      cd "./${openApiFileName}"
      # --- 1. Install Angular library dependencies ---
      echo "Installing Angular library dependencies..."
      npm install
      # --- 2. Build the Angular library using ng-packagr ---
      echo "Building Angular library with ng-packagr..."
      npm run build
      # --- 3. Configure .npmrc for publishing to GitLab Package Registry ---
      echo "Configuring .npmrc for publishing to GitLab Package Registry..."
      echo "@openapi-generator:registry=https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/packages/npm/" > .npmrc
      echo "//gitlab.com/api/v4/projects/${CI_PROJECT_ID}/packages/npm/:_authToken=${gitlab_deploy_token}" >> .npmrc
      echo "--- Contents of .npmrc ---"
      cat .npmrc
      echo "--------------------------"
      # --- 4. Publish the library from the current directory, specifying 'dist/' ---
      echo "Publishing TypeScript library from current directory, specifying 'dist/'..."
      npm publish "./dist"
      echo "--- TypeScript Library Publish Stage Finished ---"
  rules:
    - if: '$openApiFileName =~ /openapi/'

generate-java-asyncapi-file-stage:
  stage: generate-job
  image: node:latest
  script:
    - asyncFileName=$(basename "$openApiFileName")
    - npm install -g @asyncapi/cli # Install AsyncAPI CLI globally
    - asyncapi generate models java "./specs/$openApiFileName".yml --packageName=org.gini.car_asyncapi.models --output=javagenerated/src/main/java/org/gini/car_asyncapi/models --javaJackson --javaArrayType=List --javaConstraints
  artifacts:
    paths:
      - javagenerated/
    expire_in: 1 hour
  rules:
    - if: '$openApiFileName =~ /asyncapi/'

publish-java-asyncapi-library-stage:
  stage: publish-job
  script:
    - chmod +x ./gradlew
    - FULL_OPENAPI_FILE_PATH="./specs/${openApiFileName}.yaml"
    - libraryVersion=$(yq e '.info.version' "$FULL_OPENAPI_FILE_PATH")                  # Extract version from OpenAPI YAML file
    - ./gradlew publish -Pgitlab_deploy_token="${gitlab_deploy_token}" -PopenApiFileName="${openApiFileName}" -Pversion="${libraryVersion}"
  rules:
    - if: '$openApiFileName =~ /asyncapi/'





#stages:
#  - stage_a
#  - stage_b
#  # Add other stages you might have, e.g., build, test, deploy
#
## Job for Stage A (e.g., OpenAPI related tasks)
#run_openapi_job:
#  stage: stage_a
#  script:
#    - echo "Running OpenAPI-related tasks for $openApiFileName"
#    # Add your specific commands for OpenAPI processing here,
#    # e.g., chmod +x ./gradlew, yq commands, gradlew javaSpring, gradlew publish, etc.
#    - chmod +x ./gradlew
#    - FULL_OPENAPI_FILE_PATH="./specs/openapi/${openApiFileName}.yaml"
#    - extracted_version=$(yq e '.info.version' "$FULL_OPENAPI_FILE_PATH")
#    - ./gradlew publish -Pgitlab_deploy_token="${gitlab_deploy_token}" -PopenApiFileName="${openApiFileName}" -PoverrideVersion="${extracted_version}"
#  rules:
#    # This job will run ONLY if the openApiFileName variable contains "openapi"
#    - if: '$openApiFileName =~ /openapi/'
#
## Job for Stage B (e.g., AsyncAPI related tasks)
#run_asyncapi_job:
#  stage: stage_b
#  script:
#    - echo "Running AsyncAPI-related tasks for $openApiFileName"
#    # Add your specific commands for AsyncAPI processing here,
#    # e.g., commands for asyncapi generator, separate publishing logic, etc.
#    # Example:
#    # - asyncapi generate models java $FULL_ASYNCAPI_FILE_PATH --packageName=com.gini.asyncapi.model ...
#    # - ./gradlew publishAsyncapiLibrary -Pgitlab_deploy_token="${gitlab_deploy_token}" -PopenApiFileName="${openApiFileName}"
#  rules:
#    # This job will run ONLY if the openApiFileName variable contains "asyncapi"
#    - if: '$openApiFileName =~ /asyncapi/'