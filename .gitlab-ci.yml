image: openjdk:21-slim-bookworm

#https://www.youtube.com/watch?v=Yn0N8_Gfcyw ->HOW TO PUBLISH NPM PACKAGES
#before_script:
##  - apk add --no-cache yq  # For Alpine-based images
#  # or
#  - apt-get update && apt-get install -y yq # For Debian/Ubuntu-based images

variables:
  gitlab_deploy_token: "default"
  openApiFileName: "default"
  OPENAPI_BASE_DIR: "openapi/"

before_script:
  # 1. Update apt package lists
  - apt-get update -y
  # 2. Install 'wget' which is needed to download the yq binary
  - apt-get install -y wget
  # 3. DOWNLOAD AND INSTALL THE CORRECT (GO) YQ VERSION
  #    We are downloading it directly from Mike Farah's GitHub releases.
  - wget https://github.com/mikefarah/yq/releases/download/v4.40.5/yq_linux_amd64 -O /usr/local/bin/yq
  # 4. Make the downloaded yq binary executable
  - chmod +x /usr/local/bin/yq
  # 5. (Optional but recommended) Verify yq installation and version
  - echo "Verifying yq version:"
  - yq --version # This should show something like "yq (https://github.com/mikefarah/yq/) version 4.40.5"

stages:
  - generate-job
  - publish-job

workflow:
  rules:
    # Allow manual pipeline runs via the GitLab UI.
    # This is where you provide your "keyboard input" via the form.
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: always

generate-java-typescript-files-stage:
  stage: generate-job
  script:
    - chmod +x ./gradlew
    - ./gradlew javaSpring typescriptAngular -PopenApiFileName="$openApiFileName"
  artifacts:
    paths:
      - javagenerated/
      - "${openApiFileName}/"
    expire_in: 1 hour
#
publish-java-library-stage:
  stage: publish-job
  script:
    - chmod +x ./gradlew
    - FULL_OPENAPI_FILE_PATH="${OPENAPI_BASE_DIR}${openApiFileName}.yaml"
    - version=$(yq e '.info.version' "$FULL_OPENAPI_FILE_PATH")                  # Extract version from OpenAPI YAML file
    - sed -i "s/version = \".*\"/version = \"$version\"/" build.gradle.kts       # Replace version in build.gradle.kts
    - ./gradlew publish -Pgitlab_deploy_token="${gitlab_deploy_token}" -PopenApiFileName="${openApiFileName}"

#publish-typescript-library-stage:
#  stage: publish-job
#  image: node:latest
#  script:
#    # The '|' itself should be indented by 2 spaces relative to 'script:'
#    # All lines of the script content should be indented by 4 spaces (or more, consistently)
#    - |
#      # --- 0. Pre-requisite: Ensure OpenAPI client is generated ---
#      echo "OpenAPI client is assumed to be generated in './${openApiFileName}'."
#
#      # --- 1. Navigate into the generated library directory ---
#      echo "Navigating to the generated library directory: ./${openApiFileName}"
#      cd "./${openApiFileName}"
#      # --- 3. Install Angular library dependencies ---
#      echo "Installing Angular library dependencies..."
#      npm install
#
#      # --- 4. Build the Angular library using ng-packagr ---
#      echo "Building Angular library with ng-packagr..."
#      npm run build
#
#      # --- 5. Configure .npmrc for publishing to GitLab Package Registry ---
#      echo "Configuring .npmrc for publishing to GitLab Package Registry..."
#      echo "@openapi-generator:registry=https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/packages/npm/" > .npmrc
#      echo "//gitlab.com/api/v4/projects/${CI_PROJECT_ID}/packages/npm/:_authToken=${gitlab_deploy_token}" >> .npmrc
#      echo "--- Contents of .npmrc ---"
#      cat .npmrc
#      echo "--------------------------"
#      echo "Publishing TypeScript library..."
#      npm publish dist

#publish-typescript-library-stage:
#  stage: publish-job
#  image: node:latest
#  variables:
#    NPM_SCOPE: "@openapi-generator"
#  script:
#    - |
#      # --- Install jq for JSON parsing ---
#      apt-get update -y
#      apt-get install -y jq
#      echo "jq installed successfully."
#      # --- End jq installation ---
#
#      echo "--- Starting TypeScript Library Publish Stage ---"
#      echo "Initial directory: $(pwd)"
#      ls -l # List contents of the project root to see if '$openApiFileName/' exists
#
#      # --- 0. Pre-requisite: Ensure OpenAPI client is generated ---
#      echo "OpenAPI client is assumed to be generated in './${openApiFileName}' (from artifacts)."
#
#      # --- 1. Navigate into the generated library directory ---
#      echo "Navigating to the generated library directory: ./${openApiFileName}"
#      if [ ! -d "./${openApiFileName}" ]; then
#        echo "Error: Directory './${openApiFileName}' not found. Check previous stage artifacts."
#        exit 1
#      fi
#      cd "./${openApiFileName}"
#      echo "Current directory after cd: $(pwd)"
#      ls -l # List contents of the car-module-openapi/ directory
#
#      # --- 2. Extract version from OpenAPI YAML and update package.json ---
#      VERSION=$(yq e '.info.version' ../openapi/${openApiFileName}.yaml)
#      echo "Extracted version from OpenAPI spec: ${VERSION}"
#
#      echo "Updating package.json version to: ${VERSION}"
#      sed -i "s/\"version\": \".*\"/\"version\": \"${VERSION}\"/g" package.json
#
#      TARGET_NAME="${NPM_SCOPE}/${openApiFileName}"
#
#      ORIGINAL_NAME_SOURCE=$(jq -r '.name' package.json)
#      if [ "$ORIGINAL_NAME_SOURCE" != "$TARGET_NAME" ]; then
#        echo "Source package.json name is '${ORIGINAL_NAME_SOURCE}', attempting to update to '${TARGET_NAME}'"
#        sed -i "s/\"name\": \"${ORIGINAL_NAME_SOURCE}\"/\"name\": \"${TARGET_NAME}\"/g" package.json
#      else
#        echo "Source package.json name is already correct: '${TARGET_NAME}'"
#      fi
#
#      # --- DEBUG: Check source package.json content AFTER all SEDS ---
#      echo "--- Contents of source package.json AFTER SEDS (should have correct name & version) ---"
#      cat package.json
#      echo "----------------------------------------------------"
#
#      # --- 3. Install Angular library dependencies ---
#      echo "Installing Angular library dependencies..."
#      npm install
#
#      # --- 4. Build the Angular library using ng-packagr ---
#      echo "Building Angular library with ng-packagr..."
#      npm run build
#
#      # --- DEBUG: Check dist/package.json content AFTER ng-packagr build ---
#      echo "--- Contents of dist/package.json AFTER ng-packagr build (CRITICAL CHECK for 'name') ---"
#      if [ ! -f "dist/package.json" ]; then
#        echo "Error: dist/package.json not found after build. ng-packagr build might have failed."
#        exit 1
#      fi
#      cat dist/package.json
#      echo "-----------------------------------------------------"
#
#      # --- CONDITIONAL FIX: Apply name fix to dist/package.json if ng-packagr generated 'dist' ---
#      DIST_PACKAGE_NAME=$(jq -r '.name' dist/package.json)
#      if [ "$DIST_PACKAGE_NAME" == "dist" ]; then
#        echo "WARNING: dist/package.json name is 'dist', overriding to '${TARGET_NAME}' for publishing."
#        sed -i "s/\"name\": \"dist\"/\"name\": \"${TARGET_NAME}\"/g" dist/package.json
#        echo "--- Contents of dist/package.json AFTER name FIX ---"
#        cat dist/package.json
#        echo "----------------------------------------------------"
#      else
#        echo "dist/package.json name is already correct: '${DIST_PACKAGE_NAME}' (no fix applied)."
#      fi
#
#      # --- 5. Configure .npmrc for publishing to GitLab Package Registry ---
#      echo "Configuring .npmrc for publishing to GitLab Package Registry..."
#      echo "${NPM_SCOPE}:registry=https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/packages/npm/" > .npmrc
#      echo "//gitlab.com/api/v4/projects/${CI_PROJECT_ID}/packages/npm/:_authToken=${gitlab_deploy_token}" >> .npmrc
#      echo "--- Contents of .npmrc ---"
#      cat .npmrc
#      echo "--------------------------"
#
#      # --- 6. Publish the library from the current directory, specifying 'dist/' ---
#      echo "Publishing TypeScript library from current directory, specifying 'dist/'..."
#      npm publish "dist/" --access public
#
#      echo "--- TypeScript Library Publish Stage Finished ---"

publish-typescript-library-stage:
  stage: publish-job
  image: node:latest
  variables:
    NPM_SCOPE: "@openapi-generator"
  script:
    - |
      cd "./${openApiFileName}"
      cat package.json
      echo "--------------------source package.json UP---|||||-----------------------------"

      # --- 3. Install Angular library dependencies ---
      echo "Installing Angular library dependencies..."
      npm install

      # --- 4. Build the Angular library using ng-packagr ---
      echo "Building Angular library with ng-packagr..."
      npm run build

      cat dist/package.json
      echo "--------------------dist/package.json UP |||||---------------------------------"

      # --- 5. Configure .npmrc for publishing to GitLab Package Registry ---
      echo "Configuring .npmrc for publishing to GitLab Package Registry..."
      echo "@openapi-generator:registry=https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/packages/npm/" > .npmrc
      echo "//gitlab.com/api/v4/projects/${CI_PROJECT_ID}/packages/npm/:_authToken=${gitlab_deploy_token}" >> .npmrc
      echo "--- Contents of .npmrc ---"
      cat .npmrc
      echo "--------------------------"

      # --- 6. Publish the library from the current directory, specifying 'dist/' ---
      echo "Publishing TypeScript library from current directory, specifying 'dist/'..."
      npm publish "dist/" --access public

      echo "--- TypeScript Library Publish Stage Finished ---"